name: "Test"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  graalvm:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: Cache SBT
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/coursier
          ~/.ivy2/cache
          ~/.ivy2/local
          ~/.sbt/boot
          ~/.sbt/launchers
        key: ${{ runner.os }}-sbt-${{ hashFiles('build.sbt', 'project/plugins.sbt') }}
    - name: "Install Nix ❄"
      uses: cachix/install-nix-action@V27
      with:
          extra_nix_config: |
            experimental-features = nix-command flakes
    - name: "Install Cachix ❄"
      uses: cachix/cachix-action@v15
      with:
        name: cbley
        extraPullNames: pre-commit-hooks
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        pushFilter: '[-](source|nixpkgs-src)$'
    - run: git branch PR-${{ github.event.number }}
    - run: nix develop '.#graalVM' --command sbt 'scalalsJVM / GraalVMNativeImage / packageBin'
    - run: jvm/target/graalvm-native-image/scalals

  package:
    name: Nix ❄
    strategy:
      matrix:
        os: [ubuntu-latest, macos-12, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - name: "Install Nix ❄"
      uses: cachix/install-nix-action@V27
    - name: "Install Cachix ❄"
      uses: cachix/cachix-action@v15
      with:
        name: cbley
        extraPullNames: pre-commit-hooks
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        pushFilter: '[-](source|nixpkgs-src)$'
    - run: git branch PR-${{ github.event.number }}
    - run: nix flake check
    - run: nix build --print-build-logs
    - run: nix run

  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Cache SBT
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/coursier
          ~/.ivy2/cache
          ~/.ivy2/local
          ~/.sbt/boot
          ~/.sbt/launchers
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt', '.travis.yml') }}
    - name: "Install Nix ❄"
      uses: cachix/install-nix-action@V27
      with:
          #install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install
          #install_options: '--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve'
          extra_nix_config: |
            experimental-features = nix-command flakes
    - name: "Install Cachix ❄"
      uses: cachix/cachix-action@v15
      with:
        name: cbley
        extraPullNames: pre-commit-hooks
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        pushFilter: '[-](source|nixpkgs-src)$'
        # Only needed for private caches
        #authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Determine zig env
      run: |
        nix develop --ignore-environment --keep HOME --command bash -c \
          "( echo 'env<<EOF' ; zig env ; echo EOF ) >> '$GITHUB_OUTPUT'"
      id: nix-zig
    - name: Cache zig ${{ fromJson(steps.nix-zig.outputs.env).version }}
      uses: actions/cache@v4
      with:
        path: |
          ${{ fromJson(steps.nix-zig.outputs.env).global_cache_dir }}
        key: zig-${{ fromJson(steps.nix-zig.outputs.env).zig_exe }}
        restore-keys: |
          zig-
    - run: git branch PR-${{ github.event.number }}
    - name: Test
      run: nix develop --ignore-environment --keep HOME --command sbt tpolecatCiMode 'scalalsNative / test'
    - name: Cross Compile
      run: nix develop --ignore-environment --keep HOME --keep SCALANATIVE_MODE --command '.github/crosscompile'
      env:
        SCALANATIVE_MODE: ${{ github.ref == 'refs/heads/main' && 'release-full' || 'debug' }}
    - name: qemu-aarch64 scalals
      run: nix shell 'nixpkgs#qemu' --command qemu-aarch64 scalals-out-linux-aarch64
    - uses: actions/upload-artifact@v4
      with:
        path: scalals-out-*

  run:
    name: Run
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-14
    needs:
      - tests
    runs-on:
      ${{ matrix.os }}
    steps:
      - uses: actions/download-artifact@v4
        id: download
      - run: |
          ls -lh
          chmod +x scalals-*
          ./scalals-*-$( echo "${RUNNER_OS}" | tr A-Z a-z )-x86_64
        working-directory: ${{steps.download.outputs.download-path}}/artifact
      - run: |
          ./scalals-*-$( echo "${RUNNER_OS}" | tr A-Z a-z )-aarch64
        if: ${{ runner.arch == 'ARM64' }}
        working-directory: ${{steps.download.outputs.download-path}}/artifact

  release:
    if: github.ref == 'refs/heads/main'
    needs:
      - run
    runs-on: ubuntu-latest
    permissions:
      # write permission is required to create a github release
      contents: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Rename binaries
        run: |
          mv artifact/scalals-out-linux-aarch64 scalals-arm64-linux
          mv artifact/scalals-out-linux-x86_64 scalals-x86_64-linux
          mv artifact/scalals-out-macos-aarch64 scalals-arm64-darwin
          mv artifact/scalals-out-macos-x86_64 scalals-x86_64-darwin
      # Drafts your next Release notes as Pull Requests are merged into "main"
      - uses: release-drafter/release-drafter@v6
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload binaries
        run: |
          gh release upload '${{ steps.release.outputs.tag_name }}' \
            scalals-arm64-linux \
            scalals-arm64-darwin \
            scalals-x86_64-linux \
            scalals-x86_64-darwin \
            --clobber --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
