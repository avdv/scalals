name: "Test"
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  graalvm:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    - name: Cache SBT
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
      with:
        path: |
          ~/.cache/coursier
          ~/.ivy2/cache
          ~/.ivy2/local
          ~/.sbt/boot
          ~/.sbt/launchers
        key: ${{ runner.os }}-sbt-${{ hashFiles('build.sbt', 'project/plugins.sbt') }}
    - name: "Install Nix ❄"
      uses: cachix/install-nix-action@c134e4c9e34bac6cab09cf239815f9339aaaf84e # v31
      with:
          extra_nix_config: |
            experimental-features = nix-command flakes
    - name: "Install Cachix ❄"
      uses: cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad # v16
      with:
        name: cbley
        extraPullNames: pre-commit-hooks
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        pushFilter: '[-](source|nixpkgs-src)$'
    - run: git branch PR-${{ github.event.number }}
    - run: nix develop '.#graalVM' --command sbt 'scalalsJVM / GraalVMNativeImage / packageBin'
    - run: jvm/target/graalvm-native-image/scalals

  package:
    name: Nix ❄
    strategy:
      matrix:
        os: [ubuntu-latest, macos-13, macos-14]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        fetch-depth: 2
        persist-credentials: false
    - name: "Install Nix ❄"
      uses: cachix/install-nix-action@c134e4c9e34bac6cab09cf239815f9339aaaf84e # v31
    - name: "Install Cachix ❄"
      uses: cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad # v16
      with:
        name: cbley
        extraPullNames: pre-commit-hooks
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        pushFilter: '[-](source|nixpkgs-src)$'
    - name: Update scalals.dependencies hash
      id: hash-update
      if: github.event_name == 'pull_request' && github.repository == 'avdv/scalals'
      run: |-
        nix develop --command .github/update-hash scalals.dependencies
        echo exit="$( git diff --quiet flake.nix ; echo $? )" >> "$GITHUB_OUTPUT"
    - name: Set author identity and push url
      run: |-
        git config user.email '${{ github.actor }}@users.noreply.github.com'
        git config user.name '${{ github.actor }}'
        git remote set-url --push origin https://x-access-token:${{ secrets.PR_TOKEN }}@github.com/${{ github.repository }}
    - name: Push changes to PR
      if: steps.hash-update.outputs.exit != '0'
      env:
        GH_HEAD_REF: ${{ github.head_ref }}
      run: |-
        git switch -c pr-branch ${{ github.event.pull_request.head.sha }}
        git commit -m 'Update scalals.dependencies hash' flake.nix
        git push origin "HEAD:$GH_HEAD_REF"
        exit 1
    - run: nix flake check
    - run: nix build --print-build-logs
    - run: nix run

  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
    - name: Cache SBT
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
      with:
        path: |
          ~/.cache/coursier
          ~/.ivy2/cache
          ~/.ivy2/local
          ~/.sbt/boot
          ~/.sbt/launchers
        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt', '.travis.yml') }}
    - name: "Install Nix ❄"
      uses: cachix/install-nix-action@c134e4c9e34bac6cab09cf239815f9339aaaf84e # v31
      with:
          #install_url: https://nixos-nix-install-tests.cachix.org/serve/i6laym9jw3wg9mw6ncyrk6gjx4l34vvx/install
          #install_options: '--tarball-url-prefix https://nixos-nix-install-tests.cachix.org/serve'
          extra_nix_config: |
            experimental-features = nix-command flakes
    - name: "Install Cachix ❄"
      uses: cachix/cachix-action@0fc020193b5a1fa3ac4575aa3a7d3aa6a35435ad # v16
      with:
        name: cbley
        extraPullNames: pre-commit-hooks
        signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'
        pushFilter: '[-](source|nixpkgs-src)$'
        # Only needed for private caches
        #authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - name: Determine zig env
      run: |
        nix develop --ignore-environment --keep HOME --command bash -c \
          "( echo 'env<<EOF' ; zig env ; echo EOF ) >> '$GITHUB_OUTPUT'"
      id: nix-zig
    - name: Cache zig ${{ fromJson(steps.nix-zig.outputs.env).version }}
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
      with:
        path: |
          ${{ fromJson(steps.nix-zig.outputs.env).global_cache_dir }}
        key: zig-${{ fromJson(steps.nix-zig.outputs.env).zig_exe }}
        restore-keys: |
          zig-
    - run: git branch PR-${{ github.event.number }}
    - name: Test
      run: nix develop --ignore-environment --keep HOME --command sbt tpolecatCiMode 'scalalsNative / test'
    - name: Cross Compile
      run: nix develop --ignore-environment --keep HOME --keep SCALANATIVE_MODE --command '.github/crosscompile'
      env:
        SCALANATIVE_MODE: ${{ github.ref == 'refs/heads/main' && 'release-full' || 'debug' }}
    - name: qemu-aarch64 scalals
      run: nix shell --inputs-from . 'nixpkgs#qemu' --command qemu-aarch64 scalals-linux-aarch64
    - name: qemu-risc64 scalals
      run: nix shell --inputs-from . 'nixpkgs#qemu' --command qemu-riscv64 scalals-linux-riscv64
    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
      with:
        path: scalals-*

  run:
    name: Run
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-14
    needs:
      - tests
    runs-on:
      ${{ matrix.os }}
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
        id: download
      - run: |
          ls -lh
          chmod +x scalals-*
      - run: ./scalals-${{ runner.os == 'Linux' && 'linux' || 'darwin' }}-x86_64
      - run: ./scalals-${{ runner.os == 'Linux' && 'linux' || 'darwin' }}-aarch64
        if: ${{ runner.arch == 'ARM64' }}

  release:
    name: Prepare release
    if: github.ref == 'refs/heads/main'
    needs:
      - run
    runs-on: ubuntu-latest
    permissions:
      # write permission is required to create a github release
      contents: write
    steps:
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
      - name: Rename binaries
        run: |
          mv scalals-linux-aarch64 scalals-arm64-linux
          mv scalals-linux-riscv64 scalals-riscv64-linux
          mv scalals-linux-x86_64 scalals-x86_64-linux
          mv scalals-darwin-aarch64 scalals-arm64-darwin
          mv scalals-darwin-x86_64 scalals-x86_64-darwin
      # Drafts your next Release notes as Pull Requests are merged into "main"
      - uses: release-drafter/release-drafter@b1476f6e6eb133afa41ed8589daba6dc69b4d3f5 # v6
        id: release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload binaries
        run: |
          gh release upload '${{ steps.release.outputs.tag_name }}' \
            scalals-arm64-linux \
            scalals-arm64-darwin \
            scalals-riscv64-linux \
            scalals-x86_64-linux \
            scalals-x86_64-darwin \
            --clobber --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  benchmark:
    name: Benchmark
    if: github.ref == 'refs/heads/main'
    needs:
      - run
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5
      - name: ⚙ Install hyperfine
        run: |-
          sudo apt-get update
          sudo apt-get install -y hyperfine
      - run: |-
          mv scalals-linux-x86_64 scalals-x86_64-linux
          chmod +x scalals-x86_64-linux
      - uses: bencherdev/bencher@main
      - name: Track base branch benchmarks with Bencher
        env:
          BRANCH: ${{ github.head_ref || github.ref_name }}
        run: |
          bencher run \
          --project scalals \
          --token '${{ secrets.BENCHER_API_TOKEN }}' \
          --branch "$BRANCH" \
          --testbed ubuntu-latest \
          --threshold-measure latency \
          --threshold-test t_test \
          --threshold-max-sample-size 64 \
          --threshold-upper-boundary 0.99 \
          --thresholds-reset \
          --err \
          --adapter shell_hyperfine \
          --file ../results.json \
          --github-actions '${{ secrets.GITHUB_TOKEN }}' \
          "hyperfine -w 2 --export-json ../results.json './scalals-x86_64-linux --tree --color'"
